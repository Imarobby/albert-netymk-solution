!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABORT	include/TinyTimber.h	121;"	d
AFTER	include/TinyTimber.h	61;"	d
ASYNC	include/TinyTimber.h	74;"	d
BASELINE	include/TinyTimber.h	94;"	d
BEFORE	include/TinyTimber.h	68;"	d
CONFLCD	TinyTimber.c	23;"	d	file:
CONFLCD	src/TinyTimber.c	22;"	d	file:
CONFLCD	src/testLab3.c	18;"	d	file:
DISABLE	TinyTimber.c	20;"	d	file:
DISABLE	TinyTimber.c	61;"	d	file:
DISABLE	src/TinyTimber.c	19;"	d	file:
DISABLE	src/TinyTimber.c	60;"	d	file:
ENABLE	TinyTimber.c	21;"	d	file:
ENABLE	TinyTimber.c	62;"	d	file:
ENABLE	src/TinyTimber.c	20;"	d	file:
ENABLE	src/TinyTimber.c	61;"	d	file:
HIGH16	TinyTimber.c	46;"	d	file:
HIGH16	TinyTimber.c	83;"	d	file:
HIGH16	src/TinyTimber.c	45;"	d	file:
HIGH16	src/TinyTimber.c	82;"	d	file:
INF	TinyTimber.c	49;"	d	file:
INF	TinyTimber.c	86;"	d	file:
INF	src/TinyTimber.c	48;"	d	file:
INF	src/TinyTimber.c	85;"	d	file:
INIT	TinyTimber.c	24;"	d	file:
INIT	TinyTimber.c	64;"	d	file:
INIT	src/TinyTimber.c	23;"	d	file:
INIT	src/TinyTimber.c	63;"	d	file:
INLINE_1	include/TinyTimber.h	129;"	d
INLINE_2	include/TinyTimber.h	128;"	d
INLINE_3	include/TinyTimber.h	127;"	d
INTERRUPT	include/TinyTimber.h	90;"	d
Is	src/testLab3.c	/^} Is;$/;"	t	typeref:struct:__anon1	file:
LOW16	TinyTimber.c	47;"	d	file:
LOW16	TinyTimber.c	84;"	d	file:
LOW16	src/TinyTimber.c	46;"	d	file:
LOW16	src/TinyTimber.c	83;"	d	file:
MAX	TinyTimber.c	48;"	d	file:
MAX	TinyTimber.c	85;"	d	file:
MAX	src/TinyTimber.c	47;"	d	file:
MAX	src/TinyTimber.c	84;"	d	file:
MSEC	include/TinyTimber.h	100;"	d
MSEC	include/TinyTimber.h	113;"	d
Method	include/TinyTimber.h	/^typedef int (*Method)(Object*, int);$/;"	t
Msg	include/TinyTimber.h	/^typedef struct msg_block *Msg;$/;"	t	typeref:struct:msg_block
NMSGS	TinyTimber.c	16;"	d	file:
NMSGS	TinyTimber.c	57;"	d	file:
NMSGS	src/TinyTimber.c	15;"	d	file:
NMSGS	src/TinyTimber.c	56;"	d	file:
NTHREADS	TinyTimber.c	17;"	d	file:
NTHREADS	TinyTimber.c	58;"	d	file:
NTHREADS	src/TinyTimber.c	16;"	d	file:
NTHREADS	src/TinyTimber.c	57;"	d	file:
NULL	TinyTimber.c	91;"	d	file:
NULL	src/TinyTimber.c	89;"	d	file:
NullMsg	include/TinyTimber.h	29;"	d
Object	include/TinyTimber.h	/^} Object;$/;"	t	typeref:struct:__anon2
PANIC	TinyTimber.c	28;"	d	file:
PANIC	TinyTimber.c	66;"	d	file:
PANIC	src/TinyTimber.c	27;"	d	file:
PANIC	src/TinyTimber.c	65;"	d	file:
RESOLUTION	include/TinyTimber.h	106;"	d
SEC	include/TinyTimber.h	103;"	d
SEC	include/TinyTimber.h	116;"	d
SETPC	TinyTimber.c	33;"	d	file:
SETPC	TinyTimber.c	70;"	d	file:
SETPC	src/TinyTimber.c	32;"	d	file:
SETPC	src/TinyTimber.c	69;"	d	file:
SETSTACK	TinyTimber.c	31;"	d	file:
SETSTACK	TinyTimber.c	68;"	d	file:
SETSTACK	src/TinyTimber.c	30;"	d	file:
SETSTACK	src/TinyTimber.c	67;"	d	file:
SLEEP	TinyTimber.c	22;"	d	file:
SLEEP	TinyTimber.c	63;"	d	file:
SLEEP	src/TinyTimber.c	21;"	d	file:
SLEEP	src/TinyTimber.c	62;"	d	file:
STACKSIZE	TinyTimber.c	15;"	d	file:
STACKSIZE	TinyTimber.c	56;"	d	file:
STACKSIZE	src/TinyTimber.c	14;"	d	file:
STACKSIZE	src/TinyTimber.c	55;"	d	file:
STARTUP	include/TinyTimber.h	86;"	d
STATUS	TinyTimber.c	19;"	d	file:
STATUS	TinyTimber.c	60;"	d	file:
STATUS	src/TinyTimber.c	18;"	d	file:
STATUS	src/TinyTimber.c	59;"	d	file:
SYNC	include/TinyTimber.h	82;"	d
TCMP_INTERRUPT	TinyTimber.c	35;"	d	file:
TCMP_INTERRUPT	TinyTimber.c	72;"	d	file:
TCMP_INTERRUPT	src/TinyTimber.c	34;"	d	file:
TCMP_INTERRUPT	src/TinyTimber.c	71;"	d	file:
TDELTA	TinyTimber.c	45;"	d	file:
TDELTA	TinyTimber.c	82;"	d	file:
TDELTA	src/TinyTimber.c	44;"	d	file:
TDELTA	src/TinyTimber.c	81;"	d	file:
TIMERGET	TinyTimber.c	37;"	d	file:
TIMERGET	TinyTimber.c	74;"	d	file:
TIMERGET	src/TinyTimber.c	36;"	d	file:
TIMERGET	src/TinyTimber.c	73;"	d	file:
TIMERSET	TinyTimber.c	39;"	d	file:
TIMERSET	TinyTimber.c	76;"	d	file:
TIMERSET	src/TinyTimber.c	38;"	d	file:
TIMERSET	src/TinyTimber.c	75;"	d	file:
TOVFL_INTERRUPT	TinyTimber.c	36;"	d	file:
TOVFL_INTERRUPT	TinyTimber.c	73;"	d	file:
TOVFL_INTERRUPT	src/TinyTimber.c	35;"	d	file:
TOVFL_INTERRUPT	src/TinyTimber.c	72;"	d	file:
Thread	TinyTimber.c	/^typedef struct thread_block *Thread;$/;"	t	typeref:struct:thread_block	file:
Thread	src/TinyTimber.c	/^typedef struct thread_block *Thread;$/;"	t	typeref:struct:thread_block	file:
Time	include/TinyTimber.h	/^typedef signed long Time;$/;"	t
USEC	include/TinyTimber.h	110;"	d
WITHIN	include/TinyTimber.h	54;"	d
_TINYTIMBER_	include/TinyTimber.h	8;"	d
abort_msg	TinyTimber.c	/^INLINE_1 void abort_msg(Msg m) {$/;"	f
abort_msg	src/TinyTimber.c	/^INLINE_1 void abort_msg(Msg m)$/;"	f
activeStack	TinyTimber.c	/^Thread activeStack  = &thread0;$/;"	v
activeStack	src/TinyTimber.c	/^Thread activeStack = &thread0;$/;"	v
arg	TinyTimber.c	/^    int arg;                 \/\/ argument to the above$/;"	m	struct:msg_block	file:
arg	src/TinyTimber.c	/^	int arg;             \/\/ argument to the above$/;"	m	struct:msg_block	file:
async	TinyTimber.c	/^INLINE_3 Msg async(Time bl, Time dl, Object *to, Method meth, int arg) {$/;"	f
async	src/TinyTimber.c	/^INLINE_3 Msg async(Time bl, Time dl, Object *to, Method meth, int arg)$/;"	f
baseline	TinyTimber.c	/^    Time baseline;           \/\/ event time reference point$/;"	m	struct:msg_block	file:
baseline	src/TinyTimber.c	/^	Time baseline;       \/\/ event time reference point$/;"	m	struct:msg_block	file:
context	TinyTimber.c	/^    jmp_buf context;         \/\/ machine state$/;"	m	struct:thread_block	file:
context	src/TinyTimber.c	/^	jmp_buf context;     \/\/ machine state$/;"	m	struct:thread_block	file:
current	TinyTimber.c	/^Thread current      = &thread0;$/;"	v
current	src/TinyTimber.c	/^Thread current = &thread0;$/;"	v
current_baseline	TinyTimber.c	/^INLINE_1 Time current_baseline() {$/;"	f
current_baseline	src/TinyTimber.c	/^INLINE_1 Time current_baseline()$/;"	f
deadline	TinyTimber.c	/^    Time deadline;           \/\/ absolute deadline (=priority)$/;"	m	struct:msg_block	file:
deadline	src/TinyTimber.c	/^	Time deadline;       \/\/ absolute deadline (=priority)$/;"	m	struct:msg_block	file:
dequeue	TinyTimber.c	/^INLINE_2 Msg dequeue(Msg *queue) {$/;"	f
dequeue	src/TinyTimber.c	/^INLINE_2 Msg dequeue(Msg *queue)$/;"	f
dispatch	TinyTimber.c	/^INLINE_2 void dispatch( Thread next ) {$/;"	f
dispatch	src/TinyTimber.c	/^INLINE_2 void dispatch(Thread next)$/;"	f
enqueueByBaseline	TinyTimber.c	/^INLINE_2 void enqueueByBaseline(Msg p, Msg *queue) {$/;"	f
enqueueByBaseline	src/TinyTimber.c	/^INLINE_2 void enqueueByBaseline(Msg p, Msg *queue)$/;"	f
enqueueByDeadline	TinyTimber.c	/^INLINE_2 void enqueueByDeadline(Msg p, Msg *queue) {$/;"	f
enqueueByDeadline	src/TinyTimber.c	/^INLINE_2 void enqueueByDeadline(Msg p, Msg *queue)$/;"	f
idle	TinyTimber.c	/^INLINE_2 void idle(void) {$/;"	f
idle	src/TinyTimber.c	/^INLINE_2 void idle(void)$/;"	f
initIs	src/testLab3.c	17;"	d	file:
initObject	include/TinyTimber.h	37;"	d
initialize	TinyTimber.c	/^void initialize(void) {$/;"	f
initialize	src/TinyTimber.c	/^void initialize(void)$/;"	f
insert	TinyTimber.c	/^INLINE_2 void insert(Msg m, Msg *queue) {$/;"	f
insert	src/TinyTimber.c	/^INLINE_2 void insert(Msg m, Msg *queue)$/;"	f
irqstatus	TinyTimber.c	/^char irqstatus      = 0;$/;"	v
irqstatus	src/TinyTimber.c	/^char irqstatus = 0;$/;"	v
is	src/testLab3.c	/^Is is = initIs();$/;"	v
mark	TinyTimber.c	/^INLINE_1 void mark(void) {$/;"	f
mark	src/TinyTimber.c	/^INLINE_1 void mark(void)$/;"	f
messages	TinyTimber.c	/^struct msg_block    messages[NMSGS];$/;"	v	typeref:struct:msg_block
messages	src/TinyTimber.c	/^struct msg_block messages[NMSGS];$/;"	v	typeref:struct:msg_block
method	TinyTimber.c	/^    Method method;           \/\/ code to run$/;"	m	struct:msg_block	file:
method	src/TinyTimber.c	/^	Method method;       \/\/ code to run$/;"	m	struct:msg_block	file:
msg	TinyTimber.c	/^    Msg msg;                 \/\/ message under execution$/;"	m	struct:thread_block	file:
msg	src/TinyTimber.c	/^	Msg msg;             \/\/ message under execution$/;"	m	struct:thread_block	file:
msgPool	TinyTimber.c	/^Msg msgPool         = messages;$/;"	v
msgPool	src/TinyTimber.c	/^Msg msgPool = messages;$/;"	v
msgQ	TinyTimber.c	/^Msg msgQ            = NULL;$/;"	v
msgQ	src/TinyTimber.c	/^Msg msgQ = NULL;$/;"	v
msg_block	TinyTimber.c	/^struct msg_block {$/;"	s	file:
msg_block	src/TinyTimber.c	/^struct msg_block {$/;"	s	file:
next	TinyTimber.c	/^    Msg next;                \/\/ for use in linked lists$/;"	m	struct:msg_block	file:
next	TinyTimber.c	/^    Thread next;             \/\/ for use in linked lists$/;"	m	struct:thread_block	file:
next	src/TinyTimber.c	/^	Msg next;            \/\/ for use in linked lists$/;"	m	struct:msg_block	file:
next	src/TinyTimber.c	/^	Thread next;         \/\/ for use in linked lists$/;"	m	struct:thread_block	file:
overflows	TinyTimber.c	/^int overflows       = 0;$/;"	v
overflows	src/TinyTimber.c	/^int overflows = 0;$/;"	v
ownedBy	include/TinyTimber.h	/^    struct thread_block *ownedBy, *wantedBy;$/;"	m	struct:__anon2	typeref:struct:__anon2::thread_block
pop	TinyTimber.c	/^INLINE_2 Thread pop(Thread *stack) {$/;"	f
pop	src/TinyTimber.c	/^INLINE_2 Thread pop(Thread *stack)$/;"	f
push	TinyTimber.c	/^INLINE_2 void push(Thread t, Thread *stack) {$/;"	f
push	src/TinyTimber.c	/^INLINE_2 void push(Thread t, Thread *stack)$/;"	f
remove	TinyTimber.c	/^INLINE_2 int remove(Msg m, Msg *queue) {$/;"	f
remove	src/TinyTimber.c	/^INLINE_2 int remove(Msg m, Msg *queue)$/;"	f
run	TinyTimber.c	/^void run(void) {     $/;"	f
run	src/TinyTimber.c	/^void run(void)$/;"	f
schedule	TinyTimber.c	/^INLINE_2 void schedule() {$/;"	f
schedule	src/TinyTimber.c	/^INLINE_2 void schedule()$/;"	f
showAll	src/testLab3.c	/^int showAll(Is *self, int nothing){$/;"	f
stack	TinyTimber.c	/^    unsigned char stack[STACKSIZE];$/;"	m	struct:stack	file:
stack	TinyTimber.c	/^struct stack {$/;"	s	file:
stack	src/TinyTimber.c	/^	unsigned char stack[STACKSIZE];$/;"	m	struct:stack	file:
stack	src/TinyTimber.c	/^struct stack {$/;"	s	file:
stacks	TinyTimber.c	/^struct stack        stacks[NTHREADS];$/;"	v	typeref:struct:stack
stacks	src/TinyTimber.c	/^struct stack stacks[NTHREADS];$/;"	v	typeref:struct:stack
super	src/testLab3.c	/^  Object super;$/;"	m	struct:__anon1	file:
sync	TinyTimber.c	/^INLINE_3 int sync(Object *to, Method meth, int arg) {$/;"	f
sync	src/TinyTimber.c	/^INLINE_3 int sync(Object *to, Method meth, int arg)$/;"	f
thread0	TinyTimber.c	/^struct thread_block thread0;$/;"	v	typeref:struct:thread_block
thread0	src/TinyTimber.c	/^struct thread_block thread0;$/;"	v	typeref:struct:thread_block
threadPool	TinyTimber.c	/^Thread threadPool   = threads;$/;"	v
threadPool	src/TinyTimber.c	/^Thread threadPool = threads;$/;"	v
thread_block	TinyTimber.c	/^struct thread_block {$/;"	s	file:
thread_block	src/TinyTimber.c	/^struct thread_block {$/;"	s	file:
threads	TinyTimber.c	/^struct thread_block threads[NTHREADS];$/;"	v	typeref:struct:thread_block
threads	src/TinyTimber.c	/^struct thread_block threads[NTHREADS];$/;"	v	typeref:struct:thread_block
timerQ	TinyTimber.c	/^Msg timerQ          = NULL;$/;"	v
timerQ	src/TinyTimber.c	/^Msg timerQ = NULL;$/;"	v
timestamp	TinyTimber.c	/^Time timestamp      = 0;$/;"	v
timestamp	src/TinyTimber.c	/^Time timestamp = 0;$/;"	v
to	TinyTimber.c	/^    Object *to;              \/\/ receiving object$/;"	m	struct:msg_block	file:
to	src/TinyTimber.c	/^	Object *to;          \/\/ receiving object$/;"	m	struct:msg_block	file:
waitsFor	TinyTimber.c	/^    Object *waitsFor;        \/\/ deadlock detection link$/;"	m	struct:thread_block	file:
waitsFor	src/TinyTimber.c	/^	Object *waitsFor;    \/\/ deadlock detection link$/;"	m	struct:thread_block	file:
wantedBy	include/TinyTimber.h	/^    struct thread_block *ownedBy, *wantedBy;$/;"	m	struct:__anon2	typeref:struct:__anon2::
